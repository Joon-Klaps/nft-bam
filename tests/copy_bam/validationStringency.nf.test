nextflow_process {

    name "Test Process COPY_BAM"
    script "./main.nf"
    process "COPY_BAM"

    tag "stringency"

    test("don't fail when set to lenient") {
        when {
            process {
                """
                input[0] = Channel.of(
                    file("${baseDir}/tests/error_hg002.bam", checkIfExists:true)
                )
                """
            }
        }

        then {
            assert snapshot(process.out.bam.collect { 
                bam(it, stringency: "lenient").getReadsMD5()
            }).match("lenient")
        }       
    }

    test("don't fail when set to silent") {
        when {
            process {
                """
                input[0] = Channel.of(
                    file("${baseDir}/tests/error_hg002.bam", checkIfExists:true)
                )
                """
            }
        }

        then {
            assert snapshot(process.out.bam.collect { 
                bam(it, stringency: "silent").getReadsMD5()
            }).match("silent")
        }       
    }

    test("fail on unknown stringency") {
        when {
            process {
                """
                input[0] = Channel.of(
                    file("${baseDir}/tests/error_hg002.bam", checkIfExists:true)
                )
                """
            }
        }

        then {
            try {
                bam(process.out.bam.get(0), stringency: "unknown").getReads()
            } catch( IllegalArgumentException e ) {
                assert snapshot(
                    e.getMessage()
                ).match("unknown")
            }
        }       
    }
}
