nextflow_process {

    name "Test Process COPY_BAM"
    script "./main.nf"
    process "COPY_BAM"

    test("header") {

        when {
            process {
                """
                input[0] = Channel.of(
                    file("${baseDir}/tests/test.paired_end.bam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.sam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.cram", checkIfExists:true)
                )
                """
            }
        }

        then {
            assert snapshot(process.out.bam.collect { it.endsWith(".cram") ? cram(it, "${baseDir}/tests/genome.fasta").getBamHeader() : bam(it).getBamHeader() }).match("header")
        }

    }

    test("raw reads") {

        when {
            process {
                """
                input[0] = Channel.of(
                    file("${baseDir}/tests/test.paired_end.bam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.sam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.cram", checkIfExists:true)
                )
                """
            }
        }

        then {
            assert snapshot(process.out.bam.collect { it.endsWith(".cram") ? cram(it, "${baseDir}/tests/genome.fasta").getBamReads() : bam(it).getBamReads()  }).match("raw reads")
        }

    }

}
